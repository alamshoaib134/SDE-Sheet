class MyCircularQueue:

    def __init__(self, k: int):
        self.size = k
        self.rear = self.top = -1
        self.lst = [None for i in range(k)]
        

    def enQueue(self, value: int) -> bool:
        if (self.rear+1)%self.size == self.top:
            return False
        if  self.top == -1:
            self.top = 0
            self.rear = 0
            self.lst[self.rear] = value
        else:
            self.rear = (self.rear+1)%self.size
            self.lst[self.rear] = value
        return True
            
    def deQueue(self) -> bool:
        if self.top == -1:
            return False
        if self.top == self.rear:
            # x = self.lst[self.top]
            self.top = -1
            self.rear = -1
            return True
        else:
            self.top = (self.top+1)%self.size
            return True
        # return False
    
    
    def Front(self) -> int:
        if self.top == -1:
            return -1
        return self.lst[self.top]
        

    def Rear(self) -> int:
        if self.top == -1:
            return -1
        return self.lst[self.rear]
        

    def isEmpty(self) -> bool:
        if self.top == -1:
            return True
        return False
        

    def isFull(self) -> bool:
        if (self.rear+1)%self.size == self.top:
            return True
        return False
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()